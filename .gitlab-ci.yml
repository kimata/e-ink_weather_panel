image: registry.green-rabbit.net:5000/kimata/local_ubuntu:240730E

stages:
    - build-webapp
    - build-image
    - pre-test
    - test
    - deploy
    - renovate

build-react:
    stage: build-webapp

    image: node:20.14
    script:
        - cd react
        - npm ci --cache .npm --prefer-offline
        - npm run build
    artifacts:
        paths:
            - react/dist
    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .npm/

build-image:
    stage: build-image
    needs: ["build-react"]

    image: registry.green-rabbit.net:5000/kimata/local_ubuntu:240224B

    script:
        # - docker rm $(docker ps -a --filter 'status=exited' -q) || true
        - export GIT_SSL_NO_VERIFY=1
        - git clone https://gitlab.green-rabbit.net/kimata/panel_config.git
        - mv panel_config/e-ink_weather.yaml config.yaml
        - mv panel_config/e-ink_weather-demo.yaml config-demo.yaml
        - mv panel_config/e-ink_weather-small.yaml config-small.yaml
        - mkdir key
        - mv panel_config/panel.id_rsa key
        - git clone https://gitlab.green-rabbit.net/kimata/font.git private_font
        - mv private_font/* font
        - docker buildx build
          --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}:cache
          --cache-to type=registry,ref=${CI_REGISTRY_IMAGE}:cache
          --build-arg IMAGE_BUILD_DATE=$(date --iso-8601=seconds)
          --push --tag ${CI_REGISTRY_IMAGE} .

test-prepare:
    stage: pre-test

    script:
        - rye sync

    artifacts:
        paths:
            - .venv
            - /root/.cache

    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .venv
            - /root/.cache

test-walk-through:
    stage: test

    needs:
        - build-react
        - test-prepare

    dependencies:
        - build-react

    image: registry.green-rabbit.net:5000/kimata/local_ubuntu:240224B
    script:
        - poetry config --local virtualenvs.in-project true
        - poetry config --local cache-dir $PWD/.poetry/cache
        - poetry install --no-interaction --with test
        - poetry run pytest --numprocesses 8 tests/test_basic.py

    variables:
        RUST_LOG: trace

    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .venv
            - .poetry

    artifacts:
        when: always
        paths:
            - tests/evidence/**

# センサーグラフ画像のテスト
test-sensor-graph:
    stage: test

    needs:
        - build-image
        - test-prepare

    script:
        # NOTE: テストに失敗するとテスト用のコンテナが残るので削除する
        - docker ps  --filter "label=job=${CI_JOB_NAME}" | grep hours | cut -d " " -f1 | while read id; do docker stop --time 5 $id; done || true
        - docker pull ${CI_REGISTRY_IMAGE}
        - docker run --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID} --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} lib/sensor_graph.py -c config.yaml -o ${CI_JOB_NAME}.png
        - docker wait ${CI_JOB_NAME}-${CI_JOB_ID}
        - docker cp ${CI_JOB_NAME}-${CI_JOB_ID}:/opt/e-ink_weather/${CI_JOB_NAME}.png .
        - docker rm ${CI_JOB_NAME}-${CI_JOB_ID}

    artifacts:
        paths:
            - ${CI_JOB_NAME}.png

# 電力グラフ画像のテスト
test-power-graph:
    stage: test

    needs:
        - build-image
        - test-prepare

    script:
        # NOTE: テストに失敗するとテスト用のコンテナが残るので削除する
        - docker ps  --filter "label=job=${CI_JOB_NAME}" | grep hours | cut -d " " -f1 | while read id; do docker stop --time 5 $id; done || true
        - docker pull ${CI_REGISTRY_IMAGE}
        - docker run --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID} --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} lib/power_graph.py -c config.yaml -o ${CI_JOB_NAME}.png
        - docker wait ${CI_JOB_NAME}-${CI_JOB_ID}
        - docker cp ${CI_JOB_NAME}-${CI_JOB_ID}:/opt/e-ink_weather/${CI_JOB_NAME}.png .
        - docker rm ${CI_JOB_NAME}-${CI_JOB_ID}
    artifacts:
        paths:
            - ${CI_JOB_NAME}.png

# 天気予報画像のテスト
test-weather-panel:
    stage: test

    needs:
        - build-image
        - test-prepare

    script:
        # NOTE: テストに失敗するとテスト用のコンテナが残るので削除する
        - docker ps  --filter "label=job=${CI_JOB_NAME}" | grep hours | cut -d " " -f1 | while read id; do docker stop --timet 5 $id; docker rm $id; done || true
        - docker pull ${CI_REGISTRY_IMAGE}
        - docker run --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID} --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} lib/weather_panel.py -c config.yaml -o ${CI_JOB_NAME}.png
        - docker wait ${CI_JOB_NAME}-${CI_JOB_ID}
        - docker cp ${CI_JOB_NAME}-${CI_JOB_ID}:/opt/e-ink_weather/${CI_JOB_NAME}.png .
        - docker rm ${CI_JOB_NAME}-${CI_JOB_ID}
    artifacts:
        paths:
            - ${CI_JOB_NAME}.png

# 雨雲レーダ画像のテスト
# NOTE: 通常モードだと，雨雲レーダ画像の生成に失敗してもスクリプトはエラー画像を生成して
# 正常終了するので，別建ててテストを実施する．
test-rain-cloud-panel:
    stage: test

    needs:
        - build-image
        - test-prepare

    script:
        # NOTE: テストに失敗するとテスト用のコンテナが残るので削除する
        - docker ps  --filter "label=job=${CI_JOB_NAME}" | grep hours | cut -d " " -f1 | while read id; do docker stop --time 5 $id; docker rm $id; done || true
        - docker pull ${CI_REGISTRY_IMAGE}
        - docker run --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID} --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} lib/rain_cloud_panel.py -c config.yaml -o ${CI_JOB_NAME}.png
        - docker wait ${CI_JOB_NAME}-${CI_JOB_ID}
        - docker cp ${CI_JOB_NAME}-${CI_JOB_ID}:/opt/e-ink_weather/${CI_JOB_NAME}.png .
        - docker rm ${CI_JOB_NAME}-${CI_JOB_ID}
    artifacts:
        when: always
        paths:
            - ${CI_JOB_NAME}.png

# サンプル設定ファイルで，問題なく動くかチェック
test-sample:
    stage: test

    needs:
        - build-image
        - test-prepare
        - test-weather-panel
        - test-power-graph
        - test-sensor-graph
        - test-rain-cloud-panel

    script:
        - docker pull ${CI_REGISTRY_IMAGE}
        - docker run --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID} --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} app/create_image.py -c config.example.yaml -o ${CI_JOB_NAME}.png
        - docker wait ${CI_JOB_NAME}-${CI_JOB_ID}
        - docker cp ${CI_JOB_NAME}-${CI_JOB_ID}:/opt/e-ink_weather/${CI_JOB_NAME}.png .
        - docker rm ${CI_JOB_NAME}-${CI_JOB_ID}
    artifacts:
        paths:
            - ${CI_JOB_NAME}.png

test-sample-small:
    stage: test

    needs:
        - build-image
        - test-prepare
        - test-weather-panel
        - test-rain-cloud-panel

    script:
        - docker pull ${CI_REGISTRY_IMAGE}
        - docker run --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID} --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} app/create_image.py -s -c config-small.example.yaml -o ${CI_JOB_NAME}.png
        - docker wait ${CI_JOB_NAME}-${CI_JOB_ID}
        - docker cp ${CI_JOB_NAME}-${CI_JOB_ID}:/opt/e-ink_weather/${CI_JOB_NAME}.png .
        - docker rm ${CI_JOB_NAME}-${CI_JOB_ID}
    artifacts:
        paths:
            - ${CI_JOB_NAME}.png

test-demo:
    stage: test

    needs:
        - build-image
        - test-prepare
        - test-weather-panel
        - test-power-graph
        - test-sensor-graph
        - test-rain-cloud-panel

    script:
        - docker pull ${CI_REGISTRY_IMAGE}
        - docker run --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID} --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} app/create_image.py -c config-demo.yaml -o ${CI_JOB_NAME}.png
        - docker wait ${CI_JOB_NAME}-${CI_JOB_ID}
        - docker cp ${CI_JOB_NAME}-${CI_JOB_ID}:/opt/e-ink_weather/${CI_JOB_NAME}.png .
        - docker rm ${CI_JOB_NAME}-${CI_JOB_ID}
    artifacts:
        paths:
            - ${CI_JOB_NAME}.png

# 本番設定ファイルで，問題なく動くかチェック
test-regular:
    stage: test

    needs:
        - build-image
        - test-prepare
        - test-weather-panel
        - test-power-graph
        - test-sensor-graph
        - test-rain-cloud-panel

    script:
        - docker pull ${CI_REGISTRY_IMAGE}
        - docker run --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID} --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} app/create_image.py -o ${CI_JOB_NAME}.png
        - docker wait ${CI_JOB_NAME}-${CI_JOB_ID}
        - docker cp ${CI_JOB_NAME}-${CI_JOB_ID}:/opt/e-ink_weather/${CI_JOB_NAME}.png .
        - docker rm ${CI_JOB_NAME}-${CI_JOB_ID}
    artifacts:
        paths:
            - ${CI_JOB_NAME}.png

test-regular-small:
    stage: test

    needs:
        - build-image
        - test-prepare
        - test-weather-panel
        - test-rain-cloud-panel

    script:
        - docker pull ${CI_REGISTRY_IMAGE}
        - docker run --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID} --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} app/create_image.py -s -c config-small.yaml -o ${CI_JOB_NAME}.png
        - CID=`docker ps --quiet --latest --filter "ancestor=${CI_REGISTRY_IMAGE}" --filter "label=job=${CI_JOB_NAME}"`
        - docker wait ${CI_JOB_NAME}-${CI_JOB_ID}
        - docker cp ${CI_JOB_NAME}-${CI_JOB_ID}:/opt/e-ink_weather/${CI_JOB_NAME}.png .
        - docker rm ${CI_JOB_NAME}-${CI_JOB_ID}
    artifacts:
        paths:
            - ${CI_JOB_NAME}.png

# 本番設定ファイルで，問題なく動くかチェック
test-display:
    stage: test

    needs:
        - build-image
        - test-prepare
        - test-regular

    variables:
        RASP_HOSTNAME: rasp-meter-1

    script:
        - docker pull ${CI_REGISTRY_IMAGE}
        - docker run --rm --tty=true ${CI_REGISTRY_IMAGE} app/display_image.py -c config.yaml -d ${RASP_HOSTNAME} -O

test-display-small:
    stage: test

    needs:
        - build-image
        - test-prepare
        - test-regular-small

    variables:
        RASP_HOSTNAME: rasp-display-2

    script:
        - docker pull ${CI_REGISTRY_IMAGE}
        - docker run --rm --tty=true ${CI_REGISTRY_IMAGE} app/display_image.py -s -c config-small.yaml -d ${RASP_HOSTNAME} -O

test-webapp:
    stage: test

    needs:
        - build-image
        - test-prepare
        - test-demo

    image: registry.green-rabbit.net:5000/kimata/local_ubuntu:240224B
    script:
        # NOTE: テストに失敗するとテスト用のコンテナが残るので削除する
        - docker ps  --filter "label=job=${CI_JOB_NAME}" | grep hours | cut -d " " -f1 | while read id; do docker stop -t 5 $id; done || true
        - docker pull ${CI_REGISTRY_IMAGE}
        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID} --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./app/webapp.py -c config-demo.yaml -D

        - poetry config --local virtualenvs.in-project true
        - poetry config --local cache-dir $PWD/.poetry/cache
        - poetry install --no-interaction --with test
        - poetry run playwright install --with-deps chromium

        - poetry run pytest tests/test_playwright.py --host $(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID})

        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID} > flask_log.txt
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}

    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .venv
            - .poetry

    artifacts:
        when: always
        paths:
            - flask_log.txt
            - tests/evidence/**

pages:
    stage: test
    needs: ["test-walk-through"]

    script:
        - mkdir -p public/
        - cp -r tests/evidence/* public/

    artifacts:
        paths:
            - public

    dependencies:
        - test-walk-through

    only:
        - master

deploy:
    stage: deploy

    needs:
        - test-walk-through
        - test-display
        - test-display-small
        - test-webapp

    image:
        name: bitnami/kubectl:latest
        entrypoint: [""]

    script:
        - kubectl config get-contexts
        - kubectl config use-context kimata/e-ink_weather_panel:pod-rollout
        - kubectl --insecure-skip-tls-verify=true rollout restart -n panel deployment e-ink-weather-panel-deployment
        - kubectl --insecure-skip-tls-verify=true rollout restart -n panel deployment e-ink-weather-small-panel-deployment
        - kubectl --insecure-skip-tls-verify=true rollout restart -n panel deployment e-ink-weather-webapp-deployment

    rules:
        # NOTE: 自動実行ではデプロイしない
        - if: '$CI_PIPELINE_SOURCE == "schedule"'
          when: never
        - changes:
              - react/package.json
              - react/package-lock.json
              - pyoroject.json
              - src/**/*
          when: on_success
        - when: never

renovate:
    stage: renovate
    image:
        name: registry.green-rabbit.net:5000/kimata/local_renovate:38

        entrypoint: [""]
    script:
        - renovate --platform gitlab --token ${RENOVATE_TOKEN} --endpoint ${CI_SERVER_URL}/api/v4 ${CI_PROJECT_PATH}
    rules:
        - if: '$CI_COMMIT_BRANCH != "master"'
          when: never
        - if: '$CI_PIPELINE_SOURCE == "schedule"'
        - changes:
              - renovate.json
