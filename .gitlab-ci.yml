image: registry.green-rabbit.net:5000/kimata/local_ubuntu:241105B

stages:
    - build-webapp
    - build-image
    - pre-test
    - test
    - deploy
    - renovate

build-react:
    stage: build-webapp

    image: node:22.2
    script:
        - cd react
        - npm ci --cache .npm --prefer-offline
        - npm run build

    artifacts:
        paths:
            - react/dist
    cache:
        key: ${CI_JOB_NAME}
        paths:
            - .npm/

build-image:
    stage: build-image

    variables:
        BUILDER: builder

    script:
        # - docker rm $(docker ps -a --filter 'status=exited' -q) || true
        - export GIT_SSL_NO_VERIFY=1
        - git clone https://gitlab.green-rabbit.net/kimata/panel_config.git
        - mv panel_config/e-ink_weather.yaml config.yaml
        - mv panel_config/e-ink_weather-demo.yaml config-demo.yaml
        - mv panel_config/e-ink_weather-small.yaml config-small.yaml
        - mkdir key
        - mv panel_config/panel.id_rsa key
        - git clone https://gitlab.green-rabbit.net/kimata/font.git private_font
        - mv private_font/* font

        - docker buildx create --driver docker-container --name ${BUILDER} --use --config /etc/buildkitd.toml
        - docker buildx use ${BUILDER}
        - docker buildx inspect --bootstrap
        - docker buildx build --provenance=false --progress=plain --platform linux/amd64 --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}:cache --cache-to type=registry,ref=${CI_REGISTRY_IMAGE}:cache,mode=max --build-arg IMAGE_BUILD_DATE=$(date --iso-8601=seconds) --push --tag ${CI_REGISTRY_IMAGE} .

    dependencies:
        - build-react

test-prepare:
    stage: pre-test

    script:
        - rye sync

    artifacts:
        paths:
            - .venv
            - /root/.cache

    cache:
        key: ${CI_JOB_NAME}
        paths:
            - .venv
            - /root/.cache

test-walk-through:
    stage: test

    dependencies:
        - test-prepare
        - build-react

    script:
        - rye run pytest --timeout=240 -v --numprocesses=auto tests/test_basic.py

    variables:
        RUST_LOG: trace

    cache:
        key: ${CI_JOB_NAME}
        paths:
            - .venv

    artifacts:
        when: always
        paths:
            - tests/evidence/**

# 並列パネルテスト（高速化版）
test-panels-parallel:
    stage: test

    dependencies:
        - test-prepare

    variables:
        DOCKER_DRIVER: overlay2

    parallel:
        matrix:
            - PANEL_TYPE: "sensor-graph"
              SCRIPT: "src/weather_display/sensor_graph.py"
            - PANEL_TYPE: "power-graph"
              SCRIPT: "src/weather_display/power_graph.py"
            - PANEL_TYPE: "weather-panel"
              SCRIPT: "src/weather_display/weather_panel.py"
            - PANEL_TYPE: "rain-cloud-panel"
              SCRIPT: "src/weather_display/rain_cloud_panel.py"

    script:
        # コンテナ名を定義
        - CONTAINER_NAME=test-${PANEL_TYPE}-${CI_JOB_ID}

        # コンテナクリーンアップ関数
        - |
          cleanup_containers() {
            docker ps --filter "label=job=${CI_JOB_NAME}" --format "{{.ID}}" | while read id; do
              [ -n "$id" ] && docker stop --time 5 $id 2>/dev/null || true
            done
          }

        # 事前クリーンアップ
        - cleanup_containers

        # 並列テスト実行（--pull never でpull時間短縮）
        - docker run --rm --name ${CONTAINER_NAME} --label job=${CI_JOB_NAME} --pull never ${CI_REGISTRY_IMAGE} ${SCRIPT} -c config.yaml -o ${PANEL_TYPE}.png || docker run --rm --name ${CONTAINER_NAME} --label job=${CI_JOB_NAME} --pull always ${CI_REGISTRY_IMAGE} ${SCRIPT} -c config.yaml -o ${PANEL_TYPE}.png

        # 結果取得（rmオプション付きコンテナなので待機・削除不要）
        - docker cp ${CONTAINER_NAME}:/opt/e-ink_weather/${PANEL_TYPE}.png . 2>/dev/null || echo "Artifact copy failed (expected for --rm containers)"

    artifacts:
        when: always
        paths:
            - "*.png"
        expire_in: 1 hour

# 統合テスト（並列実行）
test-integration-parallel:
    stage: test

    needs:
        - test-prepare
        - test-panels-parallel

    dependencies:
        - test-prepare

    parallel:
        matrix:
            - CONFIG: "config.example.yaml"
              TEST_NAME: "sample"
              OPTIONS: ""
            - CONFIG: "config-small.example.yaml"
              TEST_NAME: "sample-small"
              OPTIONS: "-s"
            - CONFIG: "config-demo.yaml"
              TEST_NAME: "demo"
              OPTIONS: ""

    script:
        # 統合テスト実行（最適化されたDocker操作）
        - CONTAINER_NAME=test-${TEST_NAME}-${CI_JOB_ID}
        - docker run --rm --name ${CONTAINER_NAME} --label job=${CI_JOB_NAME} --pull never ${CI_REGISTRY_IMAGE} src/create_image.py ${OPTIONS} -c ${CONFIG} -o ${TEST_NAME}.png || docker run --rm --name ${CONTAINER_NAME} --label job=${CI_JOB_NAME} --pull always ${CI_REGISTRY_IMAGE} src/create_image.py ${OPTIONS} -c ${CONFIG} -o ${TEST_NAME}.png

        # アーティファクト取得
        - docker cp ${CONTAINER_NAME}:/opt/e-ink_weather/${TEST_NAME}.png . 2>/dev/null || echo "Artifact copy completed"

    artifacts:
        paths:
            - "*.png"
        expire_in: 1 hour

# 本番設定テスト（並列実行）
test-production-parallel:
    stage: test

    needs:
        - test-prepare
        - test-panels-parallel

    dependencies:
        - test-prepare

    parallel:
        matrix:
            - CONFIG: "config.yaml"
              TEST_NAME: "regular"
              OPTIONS: ""
            - CONFIG: "config-small.yaml"
              TEST_NAME: "regular-small"
              OPTIONS: "-s"

    script:
        # 本番設定テスト実行
        - CONTAINER_NAME=test-${TEST_NAME}-${CI_JOB_ID}
        - docker run --rm --name ${CONTAINER_NAME} --label job=${CI_JOB_NAME} --pull never ${CI_REGISTRY_IMAGE} src/create_image.py ${OPTIONS} -c ${CONFIG} -o ${TEST_NAME}.png || docker run --rm --name ${CONTAINER_NAME} --label job=${CI_JOB_NAME} --pull always ${CI_REGISTRY_IMAGE} src/create_image.py ${OPTIONS} -c ${CONFIG} -o ${TEST_NAME}.png

        # アーティファクト取得
        - docker cp ${CONTAINER_NAME}:/opt/e-ink_weather/${TEST_NAME}.png . 2>/dev/null || echo "Artifact copy completed"

    artifacts:
        paths:
            - "*.png"
        expire_in: 1 hour

# ディスプレイテスト（並列実行）
test-display-parallel:
    stage: test

    needs:
        - test-prepare
        - test-production-parallel

    dependencies:
        - test-prepare

    parallel:
        matrix:
            - CONFIG: "config.yaml"
              HOSTNAME: "rasp-meter-1"
              OPTIONS: ""
            - CONFIG: "config-small.yaml"
              HOSTNAME: "rasp-display-2"
              OPTIONS: "-s"

    script:
        # ディスプレイテスト実行（pullの最適化）
        - docker run --rm --pull never ${CI_REGISTRY_IMAGE} src/display_image.py ${OPTIONS} -c ${CONFIG} -p ${HOSTNAME} -O || docker run --rm --pull always ${CI_REGISTRY_IMAGE} src/display_image.py ${OPTIONS} -c ${CONFIG} -p ${HOSTNAME} -O

test-webapp:
    stage: test

    needs:
        - test-prepare
        - test-integration-parallel

    dependencies:
        - test-prepare

    variables:
        CONTAINER_NAME: webapp-test-${CI_JOB_ID}

    script:
        # 事前クリーンアップ（高速化）
        - docker ps --filter "label=job=${CI_JOB_NAME}" --format "{{.ID}}" | head -5 | xargs -r docker stop -t 5 || true

        # Webアプリコンテナ起動（最適化されたpull戦略）
        - docker run --rm --detach --name ${CONTAINER_NAME} --label job=${CI_JOB_NAME} --pull never ${CI_REGISTRY_IMAGE} ./src/webapp.py -c config-demo.yaml -D || docker run --rm --detach --name ${CONTAINER_NAME} --label job=${CI_JOB_NAME} --pull always ${CI_REGISTRY_IMAGE} ./src/webapp.py -c config-demo.yaml -D

        # Playwright準備（キャッシュ活用）
        - python3 -m playwright install --with-deps chromium

        # テスト実行
        - WEBAPP_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CONTAINER_NAME})
        - rye run pytest tests/test_playwright.py --host $WEBAPP_IP --maxfail=1

        # ログ取得とクリーンアップ
        - docker logs ${CONTAINER_NAME} > flask_log.txt 2>&1 || true
        - docker stop ${CONTAINER_NAME} || true

    cache:
        key: ${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}
        paths:
            - .venv
            - ~/.cache/ms-playwright

    artifacts:
        when: always
        paths:
            - flask_log.txt
            - tests/evidence/**
        expire_in: 1 day

pages:
    stage: test

    needs:
        - test-walk-through

    script:
        - mkdir -p public/
        - cp -r tests/evidence/* public/

    artifacts:
        paths:
            - public

    only:
        - master

deploy:
    stage: deploy

    dependencies: []

    image:
        name: bitnami/kubectl:latest
        entrypoint: ['']

    script:
        - kubectl config get-contexts
        - kubectl config use-context kimata/e-ink_weather_panel:pod-rollout
        - kubectl --insecure-skip-tls-verify=true rollout restart -n panel deployment e-ink-weather-panel-deployment
        - kubectl --insecure-skip-tls-verify=true rollout restart -n panel deployment e-ink-weather-small-panel-deployment
        - kubectl --insecure-skip-tls-verify=true rollout restart -n panel deployment e-ink-weather-webapp-deployment

    rules:
        # NOTE: 自動実行ではデプロイしない
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: never
        - when: on_success

renovate:
    stage: renovate

    dependencies: []

    image:
        name: registry.green-rabbit.net:5000/kimata/local_renovate:38

        entrypoint: ['']
    script:
        - renovate --platform gitlab --token ${RENOVATE_TOKEN} --endpoint ${CI_SERVER_URL}/api/v4 ${CI_PROJECT_PATH}
    rules:
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: never
        - if: $CI_PIPELINE_SOURCE == "schedule"
        - changes:
            - renovate.json
